/* ------------- reserved Part  -------------  */
program : 'p' 'r' 'o' 'g' 'r' 'a' 'm' ;
main : 'm' 'a' 'i' 'n' ;
end : 'e' 'n' 'd' ;
var : 'v' 'a' 'r' ;
void : 'v' 'o' 'i' 'd' ;
int : 'i' 'n' 't' ;
float : 'f' 'l' 'o' 'a' 't' ;
if : 'i' 'f' ;
else : 'e' 'l' 's' 'e' ;
while : 'w' 'h' 'i' 'l' 'e' ;
do : 'd' 'o' ;
print : 'p' 'r' 'i' 'n' 't' ;

assign : '=' ;
notequal : '!' '=' ;
less : '<' ;
greater : '>' ;
plus : '+' ;
minus : '-' ;
times : '*' ;
divide : '/' ;
colon : ':' ;
semicolon : ';' ;
comma : ',' ;
lparen : '(' ;
rparen : ')' ;
lbrace : '{' ;
rbrace : '}' ;
lbracket : '[' ;
rbracket : ']' ;

/* -----------------s Lexical Part ----------------- */
!whitespace : '\t' | '\n' | '\r' | ' ' ;
_letter : 'a'-'z' | 'A'-'Z' | '_' ; 
_digit : '0'-'9' ;

id : _letter {_letter | _digit} ;
cte_int : '0' | '1'-'9' {_digit} ;  
cte_float : '0' | '1'-'9' {_digit} '.' _digit {_digit} ;
cte_string : '"' {_letter | ' ' | '!' | '?' }'"' ;

/* ----------------- CFG ----------------- */
<< 
import (
     "babyduck/semantic"
)
var functionDir = semantic.NewFunctionDirectory()
var cuadruple = semantic.NewCuadruploList(functionDir)
>>

Start: Program <<functionDir, nil>> ;

Program : program id semicolon VarsOp FuncLoop main Body end  <<cuadruple.PrintCuadruplosAction()>>;

VarsOp : Vars 
    | empty ;

Vars : var Variable VarsPrime ;

Variable : AddVarId MasId colon Type semicolon << functionDir.SaveVariables($3.(semantic.Type))>>;

MasId : comma AddVarId MasId | empty ;

AddVarId : id <<functionDir.AppendVariable($0)>> ;

VarsPrime : Variable | empty ;

FuncLoop : Funcs FuncLoop | empty ;

Funcs : RegisterFunc lparen Params rparen lbracket Vars Body rbracket semicolon ;

RegisterFunc : void id <<functionDir.RegisterFunction($1, semantic.Void)>> ; 

Params : ParamIndiv MoreParam | empty ;

ParamIndiv : id colon Type << functionDir.RegisterParam($0, $2.(semantic.Type))>>;

MoreParam : comma ParamIndiv MoreParam | empty ;

Type : int <<semantic.Int, nil>>
     | float <<semantic.Float, nil>>
     | void <<semantic.Void, nil>> ;

Body : lbrace StateDeclare rbrace ;

StateDeclare : Statement StateDeclare | empty ;

Statement : Assign 
          | Condition 
          | Cycle 
          | FuncCall 
          | Print ;

Assign : Id_Assign Add_Assign Expresion semicolon ;

Add_Assign : assign <<cuadruple.AddOperatorAction(semantic.Assign)>>;
Id_Assign : id <<cuadruple.AddVariableAction($0)>>;

Condition : if lparen Expresion rparen Body ElseBody semicolon ;

ElseBody : else Body | empty ;

Cycle : while lparen Expresion rparen do Body semicolon ;

FuncCall : id lparen ArgList rparen semicolon ;

ArgList : Expresion MoreCall | empty ;

MoreCall : comma Expresion MoreCall | empty ;

Print : print lparen PrintList rparen semicolon ;

PrintList : PrintItem MorePrint ;

PrintItem : Expresion 
          | cte_string ;

MorePrint : comma PrintItem MorePrint | empty ;

Expresion : Exp MoreExpresion ;

Exp : Termino MoreExp ;

Termino : Factor MoreTermino ;

Factor : Agregar_Paren Expresion Terminar_Paren 
     | Plus_Minus id <<cuadruple.AddVariableAction($0)>> 
     | Plus_Minus Cte 
     | id <<cuadruple.AddVariableAction($0)>>
     | Cte ;

Agregar_Paren : lparen <<cuadruple.AddOperatorAction(semantic.NewPara)>>;
Terminar_Paren : rparen <<cuadruple.AddOperatorAction(semantic.ClosePara)>>;

MoreExpresion : Greater_Less_NotEqual Exp 
     | empty ;

Greater_Less_NotEqual : greater <<cuadruple.AddOperatorAction(semantic.Greater)>>
     | less <<cuadruple.AddOperatorAction(semantic.Less)>>
     | notequal  <<cuadruple.AddOperatorAction(semantic.NotEqual)>>;

MoreExp : Plus_Minus Termino
        | empty ;

Plus_Minus : plus <<cuadruple.AddOperatorAction(semantic.Plus)>>
     | minus <<cuadruple.AddOperatorAction(semantic.Minus)>> ; 

MoreTermino : Times_Div Factor 
            | empty ;

Times_Div : times <<cuadruple.AddOperatorAction(semantic.Times)>>
     | divide  <<cuadruple.AddOperatorAction(semantic.Divide)>>;

Cte : cte_int <<semantic.Int, nil >>
     | cte_float <<semantic.Float, nil>> ;