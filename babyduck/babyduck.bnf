/* Lexical Part */
!whitespace : '\t' | '\n' | '\r' | ' ' ;
_letter : 'a'-'z' | 'A'-'Z' | '_' ; 
_digit : '0'-'9' ;

id : _letter | _digit ;
/* un int puede ser '0' pero cuando hay mas numeros  a su lado, se ignora el '0' inicial (123 es valido, 0123 no es valido)*/
cte_int : '0' | '1'-'9' {_digit} ;  
cte_float : '0' | '1'-'9' {_digit} '.' _digit {_digit} ;
cte_string : '"' {_letter | ' ' | '!' | '?' }'"' ;

/* keywords *
program : 'p' 'r' 'o' 'g' 'r' 'a' 'm' ;
main : 'm' 'a' 'i' 'n' ;
end : 'e' 'n' 'd' ;
var : 'v' 'a' 'r' ;
void : 'v' 'o' 'i' 'd' ;
int : 'i' 'n' 't' ;
float : 'f' 'l' 'o' 'a' 't' ;
if : 'i' 'f' ;
else : 'e' 'l' 's' 'e' ;
while : 'w' 'h' 'i' 'l' 'e' ;
do : 'd' 'o' ;
print : 'p' 'r' 'i' 'n' 't' ;

assign : "=" ;
notequal : "!=" ;
less : "<" ;
plus : "+" ;
minus : "-" ;
times : "*" ;
divide : "/" ;
colon : ":" ;
semicolon : ";" ;
comma : "," ;
lparen : "(" ;
rparen : ")" ;
lbrace : "{" ;
rbrace : "}" ;
lbracket : "[" ;
rbracket : "]" ;

!whitespace : ' ' | '\t' | '\n' | '\r' ;
