// Code generated by gocc; DO NOT EDIT.

package parser

import "babyduck/semantic"
var functionDir = semantic.NewFunctionDirectory()

type (
	ProdTab      [numProductions]ProdTabEntry
	ProdTabEntry struct {
		String     string
		Id         string
		NTType     int
		Index      int
		NumSymbols int
		ReduceFunc func([]Attrib, interface{}) (Attrib, error)
	}
	Attrib interface {
	}
)

var productionsTable = ProdTab{
	ProdTabEntry{
		String: `S' : Start	<<  >>`,
		Id:         "S'",
		NTType:     0,
		Index:      0,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Start : Program	<< functionDir, nil >>`,
		Id:         "Start",
		NTType:     1,
		Index:      1,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return functionDir, nil
		},
	},
	ProdTabEntry{
		String: `Program : program id semicolon VarsOp FuncLoop main Body end	<<  >>`,
		Id:         "Program",
		NTType:     2,
		Index:      2,
		NumSymbols: 8,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `VarsOp : Vars	<<  >>`,
		Id:         "VarsOp",
		NTType:     3,
		Index:      3,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `VarsOp : empty	<<  >>`,
		Id:         "VarsOp",
		NTType:     3,
		Index:      4,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return nil, nil
		},
	},
	ProdTabEntry{
		String: `Vars : var Variable VarsPrime	<<  >>`,
		Id:         "Vars",
		NTType:     4,
		Index:      5,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Variable : AddVarId MasId colon Type semicolon	<< functionDir.SaveVariables(X[3].(semantic.Type)) >>`,
		Id:         "Variable",
		NTType:     5,
		Index:      6,
		NumSymbols: 5,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return functionDir.SaveVariables(X[3].(semantic.Type))
		},
	},
	ProdTabEntry{
		String: `MasId : comma AddVarId MasId	<<  >>`,
		Id:         "MasId",
		NTType:     6,
		Index:      7,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `MasId : empty	<<  >>`,
		Id:         "MasId",
		NTType:     6,
		Index:      8,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return nil, nil
		},
	},
	ProdTabEntry{
		String: `AddVarId : id	<< functionDir.AppendVariable(X[0]) >>`,
		Id:         "AddVarId",
		NTType:     7,
		Index:      9,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return functionDir.AppendVariable(X[0])
		},
	},
	ProdTabEntry{
		String: `VarsPrime : Variable	<<  >>`,
		Id:         "VarsPrime",
		NTType:     8,
		Index:      10,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `VarsPrime : empty	<<  >>`,
		Id:         "VarsPrime",
		NTType:     8,
		Index:      11,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return nil, nil
		},
	},
	ProdTabEntry{
		String: `FuncLoop : Funcs FuncLoop	<<  >>`,
		Id:         "FuncLoop",
		NTType:     9,
		Index:      12,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `FuncLoop : empty	<<  >>`,
		Id:         "FuncLoop",
		NTType:     9,
		Index:      13,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return nil, nil
		},
	},
	ProdTabEntry{
		String: `Funcs : RegisterFunc lparen Params rparen lbracket Vars Body rbracket semicolon	<<  >>`,
		Id:         "Funcs",
		NTType:     10,
		Index:      14,
		NumSymbols: 9,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `RegisterFunc : void id	<< functionDir.RegisterFunction(X[1], semantic.Void) >>`,
		Id:         "RegisterFunc",
		NTType:     11,
		Index:      15,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return functionDir.RegisterFunction(X[1], semantic.Void)
		},
	},
	ProdTabEntry{
		String: `Params : ParamIndiv MoreParam	<<  >>`,
		Id:         "Params",
		NTType:     12,
		Index:      16,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Params : empty	<<  >>`,
		Id:         "Params",
		NTType:     12,
		Index:      17,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return nil, nil
		},
	},
	ProdTabEntry{
		String: `ParamIndiv : id colon Type	<< functionDir.RegisterParam(X[0], X[2].(semantic.Type)) >>`,
		Id:         "ParamIndiv",
		NTType:     13,
		Index:      18,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return functionDir.RegisterParam(X[0], X[2].(semantic.Type))
		},
	},
	ProdTabEntry{
		String: `MoreParam : comma ParamIndiv MoreParam	<<  >>`,
		Id:         "MoreParam",
		NTType:     14,
		Index:      19,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `MoreParam : empty	<<  >>`,
		Id:         "MoreParam",
		NTType:     14,
		Index:      20,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return nil, nil
		},
	},
	ProdTabEntry{
		String: `Type : int	<< semantic.Int, nil >>`,
		Id:         "Type",
		NTType:     15,
		Index:      21,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return semantic.Int, nil
		},
	},
	ProdTabEntry{
		String: `Type : float	<< semantic.Float, nil >>`,
		Id:         "Type",
		NTType:     15,
		Index:      22,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return semantic.Float, nil
		},
	},
	ProdTabEntry{
		String: `Type : void	<< semantic.Void, nil >>`,
		Id:         "Type",
		NTType:     15,
		Index:      23,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return semantic.Void, nil
		},
	},
	ProdTabEntry{
		String: `Body : lbrace StateDeclare rbrace	<<  >>`,
		Id:         "Body",
		NTType:     16,
		Index:      24,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `StateDeclare : Statement StateDeclare	<<  >>`,
		Id:         "StateDeclare",
		NTType:     17,
		Index:      25,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `StateDeclare : empty	<<  >>`,
		Id:         "StateDeclare",
		NTType:     17,
		Index:      26,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return nil, nil
		},
	},
	ProdTabEntry{
		String: `Statement : Assign	<<  >>`,
		Id:         "Statement",
		NTType:     18,
		Index:      27,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Statement : Condition	<<  >>`,
		Id:         "Statement",
		NTType:     18,
		Index:      28,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Statement : Cycle	<<  >>`,
		Id:         "Statement",
		NTType:     18,
		Index:      29,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Statement : FuncCall	<<  >>`,
		Id:         "Statement",
		NTType:     18,
		Index:      30,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Statement : Print	<<  >>`,
		Id:         "Statement",
		NTType:     18,
		Index:      31,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Assign : id assign Expresion semicolon	<< functionDir.ValidateAssign(X[0]) >>`,
		Id:         "Assign",
		NTType:     19,
		Index:      32,
		NumSymbols: 4,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return functionDir.ValidateAssign(X[0])
		},
	},
	ProdTabEntry{
		String: `Condition : if lparen Expresion rparen Body ElseBody semicolon	<<  >>`,
		Id:         "Condition",
		NTType:     20,
		Index:      33,
		NumSymbols: 7,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `ElseBody : else Body	<<  >>`,
		Id:         "ElseBody",
		NTType:     21,
		Index:      34,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `ElseBody : empty	<<  >>`,
		Id:         "ElseBody",
		NTType:     21,
		Index:      35,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return nil, nil
		},
	},
	ProdTabEntry{
		String: `Cycle : while lparen Expresion rparen do Body semicolon	<<  >>`,
		Id:         "Cycle",
		NTType:     22,
		Index:      36,
		NumSymbols: 7,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `FuncCall : id lparen ArgList rparen semicolon	<<  >>`,
		Id:         "FuncCall",
		NTType:     23,
		Index:      37,
		NumSymbols: 5,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `ArgList : Expresion MoreCall	<<  >>`,
		Id:         "ArgList",
		NTType:     24,
		Index:      38,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `ArgList : empty	<<  >>`,
		Id:         "ArgList",
		NTType:     24,
		Index:      39,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return nil, nil
		},
	},
	ProdTabEntry{
		String: `MoreCall : comma Expresion MoreCall	<<  >>`,
		Id:         "MoreCall",
		NTType:     25,
		Index:      40,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `MoreCall : empty	<<  >>`,
		Id:         "MoreCall",
		NTType:     25,
		Index:      41,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return nil, nil
		},
	},
	ProdTabEntry{
		String: `Print : print lparen PrintList rparen semicolon	<<  >>`,
		Id:         "Print",
		NTType:     26,
		Index:      42,
		NumSymbols: 5,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `PrintList : PrintItem MorePrint	<<  >>`,
		Id:         "PrintList",
		NTType:     27,
		Index:      43,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `PrintItem : Expresion	<<  >>`,
		Id:         "PrintItem",
		NTType:     28,
		Index:      44,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `PrintItem : cte_string	<<  >>`,
		Id:         "PrintItem",
		NTType:     28,
		Index:      45,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `MorePrint : comma PrintItem MorePrint	<<  >>`,
		Id:         "MorePrint",
		NTType:     29,
		Index:      46,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `MorePrint : empty	<<  >>`,
		Id:         "MorePrint",
		NTType:     29,
		Index:      47,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return nil, nil
		},
	},
	ProdTabEntry{
		String: `Expresion : Exp MoreExpresion	<<  >>`,
		Id:         "Expresion",
		NTType:     30,
		Index:      48,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Exp : Termino MoreExp	<<  >>`,
		Id:         "Exp",
		NTType:     31,
		Index:      49,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Termino : Factor MoreTermino	<<  >>`,
		Id:         "Termino",
		NTType:     32,
		Index:      50,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Factor : lparen Expresion rparen	<<  >>`,
		Id:         "Factor",
		NTType:     33,
		Index:      51,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Factor : Op id	<<  >>`,
		Id:         "Factor",
		NTType:     33,
		Index:      52,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Factor : Op Cte	<<  >>`,
		Id:         "Factor",
		NTType:     33,
		Index:      53,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `MoreExpresion : ExOp Exp	<<  >>`,
		Id:         "MoreExpresion",
		NTType:     34,
		Index:      54,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `MoreExpresion : empty	<<  >>`,
		Id:         "MoreExpresion",
		NTType:     34,
		Index:      55,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return nil, nil
		},
	},
	ProdTabEntry{
		String: `ExOp : greater	<<  >>`,
		Id:         "ExOp",
		NTType:     35,
		Index:      56,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `ExOp : less	<<  >>`,
		Id:         "ExOp",
		NTType:     35,
		Index:      57,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `ExOp : notequal	<<  >>`,
		Id:         "ExOp",
		NTType:     35,
		Index:      58,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `MoreExp : plus Termino	<<  >>`,
		Id:         "MoreExp",
		NTType:     36,
		Index:      59,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `MoreExp : minus Termino	<<  >>`,
		Id:         "MoreExp",
		NTType:     36,
		Index:      60,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `MoreExp : empty	<<  >>`,
		Id:         "MoreExp",
		NTType:     36,
		Index:      61,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return nil, nil
		},
	},
	ProdTabEntry{
		String: `MoreTermino : times Factor MoreTermino	<<  >>`,
		Id:         "MoreTermino",
		NTType:     37,
		Index:      62,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `MoreTermino : divide Factor MoreTermino	<<  >>`,
		Id:         "MoreTermino",
		NTType:     37,
		Index:      63,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `MoreTermino : empty	<<  >>`,
		Id:         "MoreTermino",
		NTType:     37,
		Index:      64,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return nil, nil
		},
	},
	ProdTabEntry{
		String: `Op : plus	<<  >>`,
		Id:         "Op",
		NTType:     38,
		Index:      65,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Op : minus	<<  >>`,
		Id:         "Op",
		NTType:     38,
		Index:      66,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Op : empty	<<  >>`,
		Id:         "Op",
		NTType:     38,
		Index:      67,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return nil, nil
		},
	},
	ProdTabEntry{
		String: `Cte : cte_int	<< semantic.Int, nil >>`,
		Id:         "Cte",
		NTType:     39,
		Index:      68,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return semantic.Int, nil
		},
	},
	ProdTabEntry{
		String: `Cte : cte_float	<< semantic.Float, nil >>`,
		Id:         "Cte",
		NTType:     39,
		Index:      69,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return semantic.Float, nil
		},
	},
}
