// Code generated by gocc; DO NOT EDIT.

package parser

import "babyduck/semantic"
var functionDir = semantic.NewFunctionDirectory()

type (
	ProdTab      [numProductions]ProdTabEntry
	ProdTabEntry struct {
		String     string
		Id         string
		NTType     int
		Index      int
		NumSymbols int
		ReduceFunc func([]Attrib, interface{}) (Attrib, error)
	}
	Attrib interface {
	}
)

var productionsTable = ProdTab{
	ProdTabEntry{
		String: `S' : Start	<<  >>`,
		Id:         "S'",
		NTType:     0,
		Index:      0,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Start : Programa	<< functionDir, nil >>`,
		Id:         "Start",
		NTType:     1,
		Index:      1,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return functionDir, nil
		},
	},
	ProdTabEntry{
		String: `Programa : program id semicolon Program_vars FuncLoop main Body end	<<  >>`,
		Id:         "Programa",
		NTType:     2,
		Index:      2,
		NumSymbols: 8,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Program_vars : Vars	<<  >>`,
		Id:         "Program_vars",
		NTType:     3,
		Index:      3,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Program_vars : empty	<<  >>`,
		Id:         "Program_vars",
		NTType:     3,
		Index:      4,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return nil, nil
		},
	},
	ProdTabEntry{
		String: `FuncLoop : Funcs FuncLoop	<<  >>`,
		Id:         "FuncLoop",
		NTType:     4,
		Index:      5,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `FuncLoop : empty	<<  >>`,
		Id:         "FuncLoop",
		NTType:     4,
		Index:      6,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return nil, nil
		},
	},
	ProdTabEntry{
		String: `Vars : var VarList two_dots Type semicolon	<< functionDir.RegisterGlobalVars(X[1].([]string), X[3].(semantic.Type)) >>`,
		Id:         "Vars",
		NTType:     5,
		Index:      7,
		NumSymbols: 5,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return functionDir.RegisterGlobalVars(X[1].([]string), X[3].(semantic.Type))
		},
	},
	ProdTabEntry{
		String: `VarList : id	<< functionDir.MakeVarList(X[0]) >>`,
		Id:         "VarList",
		NTType:     6,
		Index:      8,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return functionDir.MakeVarList(X[0])
		},
	},
	ProdTabEntry{
		String: `VarList : id comma VarList	<< functionDir.ConcatVarList(X[0], X[2].([]string)) >>`,
		Id:         "VarList",
		NTType:     6,
		Index:      9,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return functionDir.ConcatVarList(X[0], X[2].([]string))
		},
	},
	ProdTabEntry{
		String: `Type : int_rw	<< semantic.Int, nil >>`,
		Id:         "Type",
		NTType:     7,
		Index:      10,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return semantic.Int, nil
		},
	},
	ProdTabEntry{
		String: `Type : float_rw	<< semantic.Float, nil >>`,
		Id:         "Type",
		NTType:     7,
		Index:      11,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return semantic.Float, nil
		},
	},
	ProdTabEntry{
		String: `Type : void	<< semantic.Void, nil >>`,
		Id:         "Type",
		NTType:     7,
		Index:      12,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return semantic.Void, nil
		},
	},
	ProdTabEntry{
		String: `Register_Func : Type id	<< functionDir.RegisterFunction(X[1], X[0].(semantic.Type), nil) >>`,
		Id:         "Register_Func",
		NTType:     8,
		Index:      13,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return functionDir.RegisterFunction(X[1], X[0].(semantic.Type), nil)
		},
	},
	ProdTabEntry{
		String: `Funcs : Register_Func parenthesis_open ParamList parenthesis_close bracket_open Vars Body bracket_close semicolon	<<  >>`,
		Id:         "Funcs",
		NTType:     9,
		Index:      14,
		NumSymbols: 9,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Funcs : Register_Func parenthesis_open ParamList parenthesis_close bracket_open Body bracket_close semicolon	<<  >>`,
		Id:         "Funcs",
		NTType:     9,
		Index:      15,
		NumSymbols: 8,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Funcs : Register_Func parenthesis_open parenthesis_close bracket_open Vars Body bracket_close semicolon	<<  >>`,
		Id:         "Funcs",
		NTType:     9,
		Index:      16,
		NumSymbols: 8,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Funcs : Register_Func parenthesis_open parenthesis_close bracket_open Body bracket_close semicolon	<<  >>`,
		Id:         "Funcs",
		NTType:     9,
		Index:      17,
		NumSymbols: 7,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `ParamList : id two_dots Type	<< functionDir.RegisterParam(X[0], X[2].(semantic.Type)) >>`,
		Id:         "ParamList",
		NTType:     10,
		Index:      18,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return functionDir.RegisterParam(X[0], X[2].(semantic.Type))
		},
	},
	ProdTabEntry{
		String: `ParamList : id two_dots Type comma ParamList	<< functionDir.RegisterParam(X[0], X[2].(semantic.Type)) >>`,
		Id:         "ParamList",
		NTType:     10,
		Index:      19,
		NumSymbols: 5,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return functionDir.RegisterParam(X[0], X[2].(semantic.Type))
		},
	},
	ProdTabEntry{
		String: `Body : curly_open Body_PR curly_close	<<  >>`,
		Id:         "Body",
		NTType:     11,
		Index:      20,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Body_PR : Statement Body_PR	<<  >>`,
		Id:         "Body_PR",
		NTType:     12,
		Index:      21,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Body_PR : empty	<<  >>`,
		Id:         "Body_PR",
		NTType:     12,
		Index:      22,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return nil, nil
		},
	},
	ProdTabEntry{
		String: `Statement : Assign	<<  >>`,
		Id:         "Statement",
		NTType:     13,
		Index:      23,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Statement : Condition	<<  >>`,
		Id:         "Statement",
		NTType:     13,
		Index:      24,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Statement : Cycle	<<  >>`,
		Id:         "Statement",
		NTType:     13,
		Index:      25,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Statement : F_call	<<  >>`,
		Id:         "Statement",
		NTType:     13,
		Index:      26,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Statement : Print	<<  >>`,
		Id:         "Statement",
		NTType:     13,
		Index:      27,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Print : print parenthesis_open Expr Print_PR parenthesis_close semicolon	<<  >>`,
		Id:         "Print",
		NTType:     14,
		Index:      28,
		NumSymbols: 6,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Print : print parenthesis_open string Print_PR parenthesis_close semicolon	<<  >>`,
		Id:         "Print",
		NTType:     14,
		Index:      29,
		NumSymbols: 6,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Print_PR : comma Expr Print_PR	<<  >>`,
		Id:         "Print_PR",
		NTType:     15,
		Index:      30,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Print_PR : comma string Print_PR	<<  >>`,
		Id:         "Print_PR",
		NTType:     15,
		Index:      31,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Print_PR : empty	<<  >>`,
		Id:         "Print_PR",
		NTType:     15,
		Index:      32,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return nil, nil
		},
	},
	ProdTabEntry{
		String: `Assign : id equal Expr semicolon	<< functionDir.ValidateAssign(X[0], X[2].(semantic.Type)), nil >>`,
		Id:         "Assign",
		NTType:     16,
		Index:      33,
		NumSymbols: 4,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return functionDir.ValidateAssign(X[0], X[2].(semantic.Type)), nil
		},
	},
	ProdTabEntry{
		String: `Cycle : while parenthesis_open Expr parenthesis_close do Body semicolon	<<  >>`,
		Id:         "Cycle",
		NTType:     17,
		Index:      34,
		NumSymbols: 7,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Condition : if parenthesis_open Expr parenthesis_close Body semicolon	<<  >>`,
		Id:         "Condition",
		NTType:     18,
		Index:      35,
		NumSymbols: 6,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Condition : if parenthesis_open Expr parenthesis_close Body else Body semicolon	<<  >>`,
		Id:         "Condition",
		NTType:     18,
		Index:      36,
		NumSymbols: 8,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `F_call : id parenthesis_open Expr F_call_PR parenthesis_close semicolon	<<  >>`,
		Id:         "F_call",
		NTType:     19,
		Index:      37,
		NumSymbols: 6,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `F_call : id parenthesis_open parenthesis_close semicolon	<<  >>`,
		Id:         "F_call",
		NTType:     19,
		Index:      38,
		NumSymbols: 4,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `F_call_PR : comma Expr F_call_PR	<<  >>`,
		Id:         "F_call_PR",
		NTType:     20,
		Index:      39,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `F_call_PR : empty	<<  >>`,
		Id:         "F_call_PR",
		NTType:     20,
		Index:      40,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return nil, nil
		},
	},
	ProdTabEntry{
		String: `Cte : myint	<< semantic.Int, nil >>`,
		Id:         "Cte",
		NTType:     21,
		Index:      41,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return semantic.Int, nil
		},
	},
	ProdTabEntry{
		String: `Cte : myfloat	<< semantic.Float, nil >>`,
		Id:         "Cte",
		NTType:     21,
		Index:      42,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return semantic.Float, nil
		},
	},
	ProdTabEntry{
		String: `Expr : Exp	<<  >>`,
		Id:         "Expr",
		NTType:     22,
		Index:      43,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Expr : Exp greater_than Exp	<< functionDir.BinaryExpression(X[0].(semantic.Type), X[1], X[2].(semantic.Type)) >>`,
		Id:         "Expr",
		NTType:     22,
		Index:      44,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return functionDir.BinaryExpression(X[0].(semantic.Type), X[1], X[2].(semantic.Type))
		},
	},
	ProdTabEntry{
		String: `Expr : Exp less_than Exp	<< functionDir.BinaryExpression(X[0].(semantic.Type), X[1], X[2].(semantic.Type)) >>`,
		Id:         "Expr",
		NTType:     22,
		Index:      45,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return functionDir.BinaryExpression(X[0].(semantic.Type), X[1], X[2].(semantic.Type))
		},
	},
	ProdTabEntry{
		String: `Expr : Exp not_equal Exp	<< functionDir.BinaryExpression(X[0].(semantic.Type), X[1], X[2].(semantic.Type)) >>`,
		Id:         "Expr",
		NTType:     22,
		Index:      46,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return functionDir.BinaryExpression(X[0].(semantic.Type), X[1], X[2].(semantic.Type))
		},
	},
	ProdTabEntry{
		String: `Exp : Term	<<  >>`,
		Id:         "Exp",
		NTType:     23,
		Index:      47,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Exp : Term plus Exp	<< functionDir.BinaryExpression(X[0].(semantic.Type), X[1], X[2].(semantic.Type)) >>`,
		Id:         "Exp",
		NTType:     23,
		Index:      48,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return functionDir.BinaryExpression(X[0].(semantic.Type), X[1], X[2].(semantic.Type))
		},
	},
	ProdTabEntry{
		String: `Exp : Term minus Exp	<< functionDir.BinaryExpression(X[0].(semantic.Type), X[1], X[2].(semantic.Type)) >>`,
		Id:         "Exp",
		NTType:     23,
		Index:      49,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return functionDir.BinaryExpression(X[0].(semantic.Type), X[1], X[2].(semantic.Type))
		},
	},
	ProdTabEntry{
		String: `Term : Fact	<<  >>`,
		Id:         "Term",
		NTType:     24,
		Index:      50,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Term : Fact mult Term	<< functionDir.BinaryExpression(X[0].(semantic.Type), X[1], X[2].(semantic.Type)) >>`,
		Id:         "Term",
		NTType:     24,
		Index:      51,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return functionDir.BinaryExpression(X[0].(semantic.Type), X[1], X[2].(semantic.Type))
		},
	},
	ProdTabEntry{
		String: `Term : Fact div Term	<< functionDir.BinaryExpression(X[0].(semantic.Type), X[1], X[2].(semantic.Type)) >>`,
		Id:         "Term",
		NTType:     24,
		Index:      52,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return functionDir.BinaryExpression(X[0].(semantic.Type), X[1], X[2].(semantic.Type))
		},
	},
	ProdTabEntry{
		String: `Fact : parenthesis_open Expr parenthesis_close	<< X[1].(semantic.Type), nil >>`,
		Id:         "Fact",
		NTType:     25,
		Index:      53,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[1].(semantic.Type), nil
		},
	},
	ProdTabEntry{
		String: `Fact : Cte	<< X[0].(semantic.Type), nil >>`,
		Id:         "Fact",
		NTType:     25,
		Index:      54,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0].(semantic.Type), nil
		},
	},
	ProdTabEntry{
		String: `Fact : id	<< functionDir.ResolveVarType(X[0]) >>`,
		Id:         "Fact",
		NTType:     25,
		Index:      55,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return functionDir.ResolveVarType(X[0])
		},
	},
	ProdTabEntry{
		String: `Fact : plus id	<< functionDir.ResolveVarType(X[1]) >>`,
		Id:         "Fact",
		NTType:     25,
		Index:      56,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return functionDir.ResolveVarType(X[1])
		},
	},
	ProdTabEntry{
		String: `Fact : minus id	<< functionDir.ResolveVarType(X[1]) >>`,
		Id:         "Fact",
		NTType:     25,
		Index:      57,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return functionDir.ResolveVarType(X[1])
		},
	},
	ProdTabEntry{
		String: `Fact : plus Cte	<< X[1].(semantic.Type), nil >>`,
		Id:         "Fact",
		NTType:     25,
		Index:      58,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[1].(semantic.Type), nil
		},
	},
	ProdTabEntry{
		String: `Fact : minus Cte	<< X[1].(semantic.Type), nil >>`,
		Id:         "Fact",
		NTType:     25,
		Index:      59,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[1].(semantic.Type), nil
		},
	},
}
